# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lqlOpl0gLitTMdsZcyZAWGLypgvkNR46
"""

# importing the libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

#setup the file
data = '/content/drive/MyDrive/global air pollution dataset.csv'
data_df = pd.read_csv(data)

#Looks at first 5 rows of dataframe
data_df.head()

"""Some information about data

"""

data_df.describe()

"""Cleaning Data

**Part 1: Indian**
"""

#Make a new dataframe
ind_df = data_df

# We only want the rows that have India as the country
non_ind = []
#Let's make a loop so we can filter through the dataset.
#This loop goes through each row and checks what country it is.
#If it is not the India, it will remove that row from the data.

for country in data_df.index:
  if data_df ["Country"].iloc[country] != 'India':
    non_ind.append(country)

##removing the rows that are not the India
ind_df = ind_df.drop(non_ind).reset_index().drop(["index"], axis = 1)

# Our new dataframe
ind_df.head()

# Look at the spread of AQI values
ind_df['AQI Category'].value_counts()

#Now graph so it is easier to see!
ind_df['AQI Category'].value_counts().plot.bar()

#Lets look at data again!
ind_df.describe()

ind_df[ind_df['AQI Category'] == 'Good']

"""Let's trying finding the cities with the lowest and highest AQI values."""

ind_df[ind_df['AQI Value'] == ind_df['AQI Value'].max()]

ind_df[ind_df['AQI Value'] == ind_df['AQI Value'].min()]

"""**Part 2: Looking at Air Pollution from a Global Scale**

**setup file again to use the entire dataset after being cleaned**
"""

# setup file
data_df = pd.read_csv('/content/drive/MyDrive/global air pollution dataset.csv')

"""**Data Cleaning**

**Summarize info about null values in the dataset**
"""

#checking for all null values
data_df.isnull().sum()

"""

*  421 null country rows in the dataset
*   1 null city row in the dataset

"""

# display null values
null_data = data_df[data_df['Country'].isnull() | data_df['City'].isnull()]
null_data[['Country', 'City']].reset_index().style.set_table_attributes("style='display:inline'").set_caption('Missing Country and City')

"""**remove all the null values and display the values again**"""

#remove null values
data_df = data_df.dropna()

# display null values (again)
null_data = data_df[data_df['Country'].isnull() | data_df['City'].isnull()]
null_data[['Country', 'City']].reset_index().style.set_table_attributes("style='display:inline'").set_caption('Missing Country and City')

"""**All null values are removed from dataset!**

**Global Data Analysis**
"""

#group each country by AQI value and find the average
data_df.groupby('Country')['AQI Value'].mean().reset_index().style.set_caption('Average AQI Value by Country')

"""**Highest average AQI value by country**"""

#find minimum avg. value in dataset and display
aqi_value = data_df.groupby('Country')['AQI Value'].mean().min()
data_df[data_df['AQI Value'] == aqi_value]

"""**why does Brazil have such a LOW AQI level compared to every other country?**

**We can check the data for every instance of Brazil**
"""

#check dataframe for AQI data for Brazil
data_df[data_df['Country'] == 'Brazil']

"""**there's so many entry of data for this country, hence the low average aqi value**


**therefore we will drop it from the dataset to make the data more reliable**


"""

data_df = data_df.drop(data_df[data_df['Country'] == 'Brazil'].index)
data_df[data_df['Country'] == 'Brazil']

#find cities with AQI values> korea, display country, city,aqi value,
data_df[data_df['AQI Value'] == 500][['Country','City','AQI Value']].style.set_caption('AQI Value of 500')

"""A majority of these cities are in India

**Display max aqi values in india**
"""

#display high aqi value in india
data_df[(data_df['Country'] == 'India') &  (data_df['AQI Value'] == 500)].style.set_caption('AQI Value of 500 in India')

aqi_value = data_df.groupby('Country')['AQI Value'].mean().max()
data_df[data_df['AQI Value'] == aqi_value]

aqi_value = data_df.groupby('City')['AQI Value'].mean().max()
data_df[data_df['AQI Value'] == aqi_value]

aqi_value = data_df.groupby('City')['AQI Value'].mean().min()
data_df[data_df['AQI Value'] == aqi_value]

"""# **AQI Value Heat Map**"""

#group data to get mean AQI value per country
pollute_country = data_df.groupby('Country')["AQI Value"].mean().reset_index()

#generate plotly choropleth map
fig = px.choropleth(pollute_country,
                    locations = "Country", locationmode= "country names",
                    color="AQI Value", hover_name="Country",
                    color_continuous_scale="Turbo",
                    title="Average AQI Value by Country")


#display the map
fig.show()

"""# Data Visualization and Correlation

**correlation matrix**
"""

#matrix of element values
corr_matrix = data_df[['AQI Value', 'CO AQI Value', 'Ozone AQI Value', 'NO2 AQI Value', 'PM2.5 AQI Value']].corr()
corr_matrix

"""**Display as a heatmap**"""

#display heatmap
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

"""**Histogram for entire dataset**


frequency of AQI and pm2.5 values in dataset

"""

#create a figure and axis
plt.figure(figsize=(8, 6))

#plot histogram of AQI values
plt.hist(data_df['AQI Value'], bins=30, color='blue', edgecolor='black', label='AQI Values')
plt.hist(data_df['PM2.5 AQI Value'], bins=30, color='orange', edgecolor='black', alpha=0.6, label='PM2.5 AQI Values')

#add title and labels
plt.title('Histogram of AQI Values', fontsize=16)
plt.xlabel('Both AQI Values', fontsize=12)
plt.ylabel('Frequency', fontsize=12)

#legend for both graphs
plt.legend(loc='upper right')
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)

#display the plot
plt.show()

"""**PM2.5 AQI isn't as frequent as the AQI Value**

**this suggests that the AQI Value is due to other pollutants but PM2.5 still has a large impact**

**Linear Regression for the values**
"""

from sklearn.linear_model import LinearRegression
#create instance of linear regression model
model = LinearRegression()

#convert 1D array into 2D array
x = data_df['AQI Value'].values.reshape(-1, 1)
y = data_df['PM2.5 AQI Value'].values.reshape(-1, 1)

#fit the model to variables given
model.fit(x, y)

#plot regression line and graph
plt.plot(x, model.predict(x), color='red')
sns.scatterplot(x='AQI Value', y='PM2.5 AQI Value', data=data_df)
plt.title('AQI Value vs PM2.5 AQI Value')
plt.xlabel('AQI Value')
plt.ylabel('PM2.5 AQI Value')
plt.show()